import Quickbooks from './quickbooks';
declare type QuickbooksOnlineArgs = QuickbooksArgs & {
    minorVersion: string;
};
export default class QuickbooksOnline extends Quickbooks {
    constructor(opts: QuickbooksOnlineArgs);
    createAccount: (account: Account) => Promise<Account>;
    createBill: (bill: Bill) => Promise<Bill>;
    createBillPayment: (billPayment: BillPayment) => Promise<BillPayment>;
    createClass: (klass: Class) => Promise<Class>;
    createCreditMemo: (creditMemo: CreditMemo) => Promise<CreditMemo>;
    createCustomer: (customer: Customer) => Promise<Customer>;
    createDepartment: (department: Department) => Promise<Department>;
    createDeposit: (deposit: Deposit) => Promise<Deposit>;
    createEmployee: (employee: Employee) => Promise<Employee>;
    createEstimate: (estimate: Estimate) => Promise<Estimate>;
    createInvoice: (invoice: Invoice) => Promise<Invoice>;
    createItem: (item: Item) => Promise<Item>;
    createJournalCode: (journalCode: JournalCode) => Promise<JournalCode>;
    createJournalEntry: (journalEntry: JournalEntry) => Promise<JournalEntry>;
    createPayment: (payment: Payment) => Promise<Payment>;
    createPaymentMethod: (paymentMethod: PaymentMethod) => Promise<PaymentMethod>;
    createPurchase: (purchase: Purchase) => Promise<Purchase>;
    createPurchaseOrder: (purchaseOrder: PurchaseOrder) => Promise<PurchaseOrder>;
    createRefundReceipt: (refundReceipt: RefundReceipt) => Promise<RefundReceipt>;
    createSalesReceipt: (salesReceipt: SalesReceipt) => Promise<SalesReceipt>;
    createTaxAgency: (taxAgency: TaxAgency) => Promise<TaxAgency>;
    createTaxService: (taxService: TaxService) => Promise<TaxService>;
    createTerm: (term: Term) => Promise<Term>;
    createTimeActivity: (timeActivity: TimeActivity) => Promise<TimeActivity>;
    createTransfer: (transfer: Transfer) => Promise<Transfer>;
    createVendor: (vendor: Vendor) => Promise<Vendor>;
    createVendorCredit: (vendorCredit: VendorCredit) => Promise<VendorCredit>;
    getAccount: (id: string) => Promise<Account>;
    getBill: (id: string) => Promise<Bill>;
    getBillPayment: (id: string) => Promise<BillPayment>;
    getClass: (id: string) => Promise<Class>;
    getCompanyInfo: (id: string) => Promise<CompanyInfo>;
    getCompanyCurrency: (id: string) => Promise<CompanyCurrency>;
    getCreditMemo: (id: string) => Promise<CreditMemo>;
    getCustomer: (id: string) => Promise<Customer>;
    getCustomerType: (id: string) => Promise<CustomerType>;
    getDepartment: (id: string) => Promise<Department>;
    getDeposit: (id: string) => Promise<Deposit>;
    getEmployee: (id: string) => Promise<Employee>;
    getEstimate: (id: string) => Promise<Estimate>;
    getExchangeRate: (options: {
        currencycode: string;
        asofdate?: string;
    }) => Promise<ExchangeRate>;
    getEstimatePdf: (id: string) => Promise<Estimate>;
    sendEstimatePdf: (id: string, sendTo?: string | undefined) => Promise<Estimate>;
    getInvoice: (id: string) => Promise<Invoice>;
    getInvoicePdf: (id: string) => Promise<Invoice>;
    sendInvoicePdf: (id: string, json: Partial<Invoice> & {
        DeliveryAddress: {
            Address: string;
        };
        SyncToken: string;
    }) => Promise<Invoice>;
    sendPurchaseOrder: (id: string, sendTo?: string | undefined) => Promise<PurchaseOrder>;
    getItem: (id: string) => Promise<Item>;
    getJournalCode: (id: string) => Promise<JournalCode>;
    getJournalEntry: (id: string) => Promise<JournalEntry>;
    getPayment: (id: string) => Promise<Payment>;
    getPaymentMethod: (id: string) => Promise<PaymentMethod>;
    getPurchase: (id: string) => Promise<PurchaseOrder>;
    getPurchaseOrder: (id: string) => Promise<PurchaseOrder>;
    getRefundReceipt: (id: string) => Promise<RefundReceipt>;
    getReports: (id: string) => Promise<Report[]>;
    getSalesReceipt: (id: string) => Promise<SalesReceipt>;
    getSalesReceiptPdf: (id: string) => Promise<SalesReceipt>;
    sendSalesReceiptPdf: (id: string, sendTo?: string | undefined) => Promise<SalesReceipt>;
    getTaxAgency: (id: string) => Promise<TaxAgency>;
    getTaxCode: (id: string) => Promise<TaxCode>;
    getTaxRate: (id: string) => Promise<TaxRate>;
    getTerm: (id: string) => Promise<Term>;
    getTimeActivity: (id: string) => Promise<TimeActivity>;
    getTransfer: (id: string) => Promise<Transfer>;
    getVendor: (id: string) => Promise<Vendor>;
    getVendorCredit: (id: string) => Promise<VendorCredit>;
    updateAccount: (account: Account) => Promise<Account>;
    updateBill: (bill: Bill) => Promise<Bill>;
    updateBillPayment: (billPayment: BillPayment) => Promise<BillPayment>;
    updateClass: (klass: Class) => Promise<Class>;
    updateCompanyInfo: (companyInfo: CompanyInfo) => Promise<CompanyInfo>;
    updateCreditMemo: (creditMemo: CreditMemo) => Promise<CreditMemo>;
    updateCustomer: (customer: Customer) => Promise<Customer>;
    updateDepartment: (department: Department) => Promise<Department>;
    updateDeposit: (deposit: Deposit) => Promise<Deposit>;
    updateEmployee: (employee: Employee) => Promise<Employee>;
    updateEstimate: (estimate: Estimate) => Promise<Estimate>;
    updateInvoice: (invoice: Invoice) => Promise<Invoice>;
    updateItem: (item: Item) => Promise<Item>;
    updateJournalCode: (journalCode: JournalCode) => Promise<JournalCode>;
    updateJournalEntry: (journalEntry: JournalEntry) => Promise<JournalEntry>;
    updatePayment: (payment: Payment) => Promise<Payment>;
    updatePaymentMethod: (paymentMethod: PaymentMethod) => Promise<PaymentMethod>;
    updatePurchase: (purchase: Purchase) => Promise<Purchase>;
    updatePurchaseOrder: (purchaseOrder: PurchaseOrder) => Promise<PurchaseOrder>;
    updateRefundReceipt: (refundReceipt: RefundReceipt) => Promise<RefundReceipt>;
    updateSalesReceipt: (salesReceipt: SalesReceipt) => Promise<SalesReceipt>;
    updateTaxAgency: (taxAgency: TaxAgency) => Promise<TaxAgency>;
    updateTaxCode: (taxCode: TaxCode) => Promise<TaxCode>;
    updateTaxRate: (taxRate: TaxRate) => Promise<TaxRate>;
    updateTerm: (term: Term) => Promise<Term>;
    updateTimeActivity: (timeActivity: TimeActivity) => Promise<TimeActivity>;
    updateTransfer: (transfer: Transfer) => Promise<Transfer>;
    updateVendor: (vendor: Vendor) => Promise<Vendor>;
    updateVendorCredit: (vendorCredit: VendorCredit) => Promise<VendorCredit>;
    updateExchangeRate: (exchangeRate: number) => Promise<number>;
    deleteCustomer: (idOrEntity: string | Customer) => Promise<Customer>;
    deleteClass: (idOrEntity: string | Class) => Promise<Class>;
    deleteDepartment: (idOrEntity: string | Department) => Promise<Department>;
    deleteEmployee: (idOrEntity: string | Employee) => Promise<Employee>;
    deleteItem: (idOrEntity: string | Item) => Promise<Item>;
    deletePaymentMethod: (idOrEntity: string | PaymentMethod) => Promise<PaymentMethod>;
    deleteTerm: (idOrEntity: string | Term) => Promise<Term>;
    deleteVendor: (idOrEntity: string | Vendor) => Promise<Vendor>;
    deleteBill: (idOrEntity: string | Bill) => Promise<Bill>;
    deleteBillPayment: (idOrEntity: string | BillPayment) => Promise<BillPayment>;
    deleteCreditMemo: (idOrEntity: string | CreditMemo) => Promise<CreditMemo>;
    deleteDeposit: (idOrEntity: string | Deposit) => Promise<Deposit>;
    deleteEstimate: (idOrEntity: string | Estimate) => Promise<Estimate>;
    deleteInvoice: (idOrEntity: string | Invoice) => Promise<Invoice>;
    deleteJournalCode: (idOrEntity: string | JournalCode) => Promise<JournalCode>;
    deleteJournalEntry: (idOrEntity: string | JournalEntry) => Promise<JournalEntry>;
    deletePayment: (idOrEntity: string | Payment) => Promise<Payment>;
    deletePurchase: (idOrEntity: string | Purchase) => Promise<Purchase>;
    deletePurchaseOrder: (idOrEntity: string | PurchaseOrder) => Promise<PurchaseOrder>;
    deleteRefundReceipt: (idOrEntity: string | RefundReceipt) => Promise<RefundReceipt>;
    deleteSalesReceipt: (idOrEntity: string | SalesReceipt) => Promise<SalesReceipt>;
    deleteTimeActivity: (idOrEntity: string | TimeActivity) => Promise<TimeActivity>;
    deleteTransfer: (idOrEntity: string | Transfer) => Promise<Transfer>;
    deleteVendorCredit: (idOrEntity: string | VendorCredit) => Promise<VendorCredit>;
    findAccounts: (statement: string) => Promise<Account[]>;
    findBills: (statement: string) => Promise<Bill[]>;
    findBillPayments: (statement: string) => Promise<BillPayment[]>;
    findBudgets: (statement: string) => Promise<Budget[]>;
    findClasses: (statement: string) => Promise<Class[]>;
    findCompanyInfos: (statement: string) => Promise<CompanyInfo[]>;
    findCompanyCurrencies: (statement: string) => Promise<CompanyCurrency[]>;
    findCreditMemos: (statement: string) => Promise<CreditMemo[]>;
    findCustomers: (statement: string) => Promise<Customer[]>;
    findCustomerTypes: (statement: string) => Promise<CustomerType[]>;
    findDepartments: (statement: string) => Promise<Department[]>;
    findDeposits: (statement: string) => Promise<Deposit[]>;
    findEmployees: (statement: string) => Promise<Employee[]>;
    findEstimates: (statement: string) => Promise<Estimate[]>;
    findInvoices: (statement: string, includeLink?: boolean | undefined) => Promise<Invoice[]>;
    findItems: (statement: string) => Promise<Item[]>;
    findJournalCodes: (statement: string) => Promise<JournalCode[]>;
    findJournalEntries: (statement: string) => Promise<JournalEntry[]>;
    findPayments: (statement: string) => Promise<Payment[]>;
    findPaymentMethods: (statement: string) => Promise<PaymentMethod[]>;
    findPurchases: (statement: string) => Promise<Purchase[]>;
    findPurchaseOrders: (statement: string) => Promise<PurchaseOrder[]>;
    findRefundReceipts: (statement: string) => Promise<RefundReceipt[]>;
    findSalesReceipts: (statement: string) => Promise<SalesReceipt[]>;
    findTaxAgencies: (statement: string) => Promise<TaxAgency[]>;
    findTaxCodes: (statement: string) => Promise<TaxCode[]>;
    findTaxRates: (statement: string) => Promise<TaxRate[]>;
    findTerms: (statement: string) => Promise<Term[]>;
    findTimeActivities: (statement: string) => Promise<TimeActivity[]>;
    findTransfers: (statement: string) => Promise<Transfer[]>;
    findVendors: (statement: string) => Promise<Vendor[]>;
    findVendorCredits: (statement: string) => Promise<VendorCredit[]>;
    findExchangeRates: (statement: string) => Promise<number[]>;
    reportBalanceSheet: (options: Record<string, any>) => Promise<Report>;
    reportProfitAndLoss: (options: Record<string, any>) => Promise<Report>;
    reportProfitAndLossDetail: (options: Record<string, any>) => Promise<Report>;
    reportTrialBalance: (options: Record<string, any>) => Promise<Report>;
    reportTrialBalanceFR: (options: Record<string, any>) => Promise<Report>;
    reportCashFlow: (options: Record<string, any>) => Promise<Report>;
    reportInventoryValuationSummary: (options: Record<string, any>) => Promise<Report>;
    reportCustomerSales: (options: Record<string, any>) => Promise<Report>;
    reportItemSales: (options: Record<string, any>) => Promise<Report>;
    reportCustomerIncome: (options: Record<string, any>) => Promise<Report>;
    reportCustomerBalance: (options: Record<string, any>) => Promise<Report>;
    reportCustomerBalanceDetail: (options: Record<string, any>) => Promise<Report>;
    reportAgedReceivables: (options: Record<string, any>) => Promise<Report>;
    reportAgedReceivableDetail: (options: Record<string, any>) => Promise<Report>;
    reportVendorBalance: (options: Record<string, any>) => Promise<Report>;
    reportVendorBalanceDetail: (options: Record<string, any>) => Promise<Report>;
    reportAgedPayables: (options: Record<string, any>) => Promise<Report>;
    reportAgedPayableDetail: (options: Record<string, any>) => Promise<Report>;
    reportVendorExpense: (options: Record<string, any>) => Promise<Report>;
    reportTransactionList: (options: Record<string, any>) => Promise<Report>;
    reportGeneralLedger: (options: Record<string, any>) => Promise<Report>;
    reportTaxSummary: (options: Record<string, any>) => Promise<Report>;
    reportDepartmentSales: (options: Record<string, any>) => Promise<Report>;
    reportClassSales: (options: Record<string, any>) => Promise<Report>;
    reportAccountList: (options: Record<string, any>) => Promise<Report>;
    reportJournalReport: (options: Record<string, any>) => Promise<Report>;
}
export {};
